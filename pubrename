#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul  1 18:24:03 2021

@author: florian
"""

# needed for delay when opening evince
import time

# needed to start evince
import subprocess

# needed for operations concerning files and folders
import os

# needed to choose random file
import random

# needed for handling of pyqt
import sys

# needed for pyqt

from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QLineEdit, QPushButton, QGridLayout, QFileDialog

# needed for normalizing filename
import unidecode

# default path to operate in
path = "./"

def set_path():
    
    global path
    
    path = QFileDialog.getExistingDirectory()+"/"

    ent_directory.setText(path)
    
    return path

def check_filetype(file):
    """
    Check if file is pdf; returns boolean
    
    2do: Check if file is pdf, djvu, or epub; returns boolean

    """
    accepted_filetypes = [".pdf"]#, ".djvu", ".djv", ".epub"]
    file_name, file_extension = os.path.splitext(file)
    
    if (file_extension in accepted_filetypes):
        return True
    else:
        return False
    
def open_random_file():
    
    os.system("pkill evince")
    
    global file
    
    file=path+random.choice(os.listdir(path))
    
    ent_file.setText(file)
    
    while check_filetype(file) == False:
        file=path+random.choice(os.listdir(path))
        ent_file.setText(file)
        
    handle_file(file)
        
    return file

def open_file():
    
    os.system("pkill evince")
    
    global file
    
    file = QFileDialog.getOpenFileName()
    
    while check_filetype(file) == False:
        file = QFileDialog.getOpenFileName()
        
    handle_file(file)
        
    return file

def handle_file(file):
    
    ent_newfilename.clear()
    ent_oldfilename.clear()
    
    subprocess.Popen(["evince", file])
    time.sleep(0.75)
    subprocess.Popen(["xdotool", "key", "Super+Right"])
    time.sleep(0.1)
    subprocess.Popen(["xdotool", "key", "F9"])
    time.sleep(0.1)
    subprocess.Popen(["xdotool", "keydown", "Alt", "key", "Tab"])
    time.sleep(0.1)
    subprocess.Popen(["xdotool", "keyup", "Alt"])
    
    old_file_name, file_extension = os.path.splitext(file)
    
    ent_oldfilename.setText(old_file_name)

def preview():
    author = ent_author.text()
    author = author + "_"

    year = ent_year.text()
    year = year + "_"
    
    title = ent_title.text()
    
    subtitle = ent_subtitle.text()

    if not subtitle == "":
        subtitle = "_" + subtitle

    additions = ent_additions.text()
    
    if not additions == "":
        additions = "_" + additions
    
    new_file_name = author + year + title + subtitle + additions + ".pdf"

    new_file_name=new_file_name.replace("-\n","")
    new_file_name=new_file_name.replace("\n"," ")
    new_file_name=new_file_name.replace(":"," ")
    new_file_name=new_file_name.replace("  "," ")
    new_file_name=new_file_name.replace(" ","-")
    new_file_name=new_file_name.replace(",","")
    new_file_name=new_file_name.replace("\"","")
    new_file_name=new_file_name.casefold()
    new_file_name=unidecode.unidecode(new_file_name)
    
    ent_newfilename.setText(new_file_name)
    

def submit(file):
    
    new_file_name = ent_newfilename.text()
    
    if os.path.isdir(path+"/renamed") == False:
        os.mkdir(path+"/renamed")
    
    os.rename(file, path+"/renamed/"+new_file_name)

app = QApplication(sys.argv)

window = QWidget()
window.setWindowTitle("Pubrename")
window.setGeometry(200, 100, 800, 400)
window.move(200, 100)

### Elements

lbl_oldfilename = QLabel("Alter Dateiname: ", parent=window)
ent_oldfilename = QLineEdit(parent=window)

lbl_author = QLabel("Autor: ", parent=window)
ent_author = QLineEdit(parent=window)

lbl_year = QLabel("Jahr: ", parent=window)
ent_year = QLineEdit(parent=window)

lbl_title = QLabel("Titel: ", parent=window)
ent_title = QLineEdit(parent=window)

lbl_subtitle = QLabel("Untertitel (optional): ", parent=window)
ent_subtitle = QLineEdit(parent=window)

lbl_additions = QLabel("Zusatz (optional): ", parent=window)
ent_additions = QLineEdit(parent=window)

btn_preview = QPushButton("Vorschau")
btn_preview.clicked.connect(preview)

lbl_newfilename = QLabel("Neuer Dateiname: ", parent=window)
ent_newfilename = QLineEdit(parent=window)

btn_submit = QPushButton("Übernehmen")
btn_submit.clicked.connect(lambda: submit(file))

btn_chosedirectory = QPushButton("Verzeichnis wählen")
btn_chosedirectory.clicked.connect(set_path)

btn_randomfile = QPushButton("Öffne zufällige Datei")
btn_randomfile.clicked.connect(open_random_file)

btn_openfile = QPushButton("Öffne bestimmte Datei")
btn_openfile.clicked.connect(open_file)

lbl_directory = QLabel("Aktueller Pfad: ", parent=window)
ent_directory = QLineEdit(parent=window)

lbl_file = QLabel("Aktuelle Datei: ", parent=window)
ent_file = QLineEdit(parent=window)


### Layout

layout = QGridLayout()

layout.addWidget(lbl_oldfilename, 0, 0)
layout.addWidget(ent_oldfilename, 0, 1, 1, 2)

layout.addWidget(lbl_author, 1, 0)
layout.addWidget(ent_author, 1, 1, 1, 2)

layout.addWidget(lbl_year, 2, 0)
layout.addWidget(ent_year, 2, 1, 1, 2)

layout.addWidget(lbl_title, 3, 0)
layout.addWidget(ent_title, 3, 1, 1, 2)

layout.addWidget(lbl_subtitle, 4, 0)
layout.addWidget(ent_subtitle, 4, 1, 1, 2)

layout.addWidget(lbl_additions, 5, 0)
layout.addWidget(ent_additions, 5, 1, 1, 2)

layout.addWidget(btn_preview, 6, 1)
layout.addWidget(btn_submit, 6, 2)

layout.addWidget(lbl_newfilename, 7, 0)
layout.addWidget(ent_newfilename, 7, 1, 1, 2)

layout.addWidget(btn_chosedirectory, 8, 1)
layout.addWidget(btn_randomfile, 8, 2)
layout.addWidget(btn_openfile, 9, 2)

layout.addWidget(lbl_directory, 10, 0)
layout.addWidget(ent_directory, 10, 1, 1, 2)

layout.addWidget(lbl_file, 11, 0)
layout.addWidget(ent_file, 11, 1, 1, 2)


window.setLayout(layout)

window.show()

sys.exit(app.exec_())